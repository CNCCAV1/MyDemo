using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    public class InIHelper
    {
        #region Read ini
        [DllImport("kernel32")]
        private static extern int GetPrivateProfileString(string section, string key, string def, StringBuilder retval, int size, string filePath);
        [DllImport("kernel32")]
        private static extern int GetPrivateProfileInt(string section, string key, int def, string filePath);

        public static string exresult = "exresult";
        /// <summary>
        /// 读取ini中的值
        /// </summary>
        /// <param name="Section"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static string GetContentValue(string Section, string key, string fileName)
        {
            string strIniFilePath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, fileName);//获取ini路径
            string result = exresult;
            if (System.IO.File.Exists(strIniFilePath))
            {
                StringBuilder temp = new StringBuilder(1024);
                GetPrivateProfileString(Section, key, exresult, temp, 1024, strIniFilePath);
                result = temp.ToString();
            }

            return result;
        }
        public static int GetContentIntValue(string section, string key, string filePath)
        {
            return GetPrivateProfileInt(section, key, 0, filePath);
        }
        public static T ReadInI<T>(string filename) where T : new()
        {
            try
            {

                T data = new T();
                Type type = data.GetType();
                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);
                foreach (var item in props)
                {
                    string section = item.Name;
                    Type t = item.PropertyType;
                    var sectionproinfo = type.GetProperty(section);
                    var result = sectionproinfo.GetValue(data);
                    var list = t.GetProperties(BindingFlags.Public | BindingFlags.Instance);
                    foreach (var info in list)
                    {
                        string key = info.Name;
                        Type tt = info.PropertyType;
                        var property = t.GetProperty(key);
                        var value = GetContentValue(section, key, filename);
                        property.SetValue(result, value);
                    }
                    sectionproinfo.SetValue(data, result);
                }
                return data;
            }
            catch (Exception ex)
            {
                return default(T);

            }
        }
        #endregion

        #region Write ini
        /// <summary>
        /// 写入INI文件
        /// </summary>
        /// <param name="section">节点名称[如[TypeName]]</param>
        /// <param name="key">键</param>
        /// <param name="val">值</param>
        /// <param name="filepath">文件路径</param>
        /// <returns></returns>
        [DllImport("kernel32")]
        private static extern long WritePrivateProfileString(string section, string key, string val, string filepath);

        /// <summary>
        /// 写入
        /// </summary>
        /// <param name="section"></param>
        /// <param name="key"></param>
        /// <param name="iValue"></param>
        /// <param name="fileName"></param>
        public static void WriteContentValue(string section, string key, string iValue, string fileName)
        {
            string filePath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, fileName);
            WritePrivateProfileString(section, key, iValue, filePath);
        }
        /// <summary>
        /// 写入INI文件
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="obj"></param>
        /// <param name="filename"></param>
        public static void WriteInI<T>(T obj,string filename)
        {
            Type type = typeof(T);
            var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (var item in props)
            {
                string section = item.Name;
                Type t = item.PropertyType;
                var sectionproinfo = type.GetProperty(section);
                var result = sectionproinfo.GetValue(obj);
                var list = t.GetProperties(BindingFlags.Public | BindingFlags.Instance);
                foreach (var info in list)
                {
                    string key = info.Name;
                    Type tt = info.PropertyType;
                    var property  = t.GetProperty(key);
                    if (result == null)
                        WritePrivateProfileString(section, key, "", filename);
                    else if(property.GetValue(result) == null)
                        WritePrivateProfileString(section, key, "", filename);
                    else
                        WritePrivateProfileString(section, key, property.GetValue(result).ToString(), filename);
                }
            }
        }
        #endregion
    }
}
